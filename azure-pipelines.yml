trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

stages:
  - stage: 'Build'
    displayName: 'Build the Web Api'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          name: 'Default'

        variables:
          wwwrootDir: 'FiapFase1.Interface/wwwroot'
          dotnetSdkVersion: '8.x'

        steps:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK $(dotnetSdkVersion)'
          inputs:
            version: '$(dotnetSdkVersion)'

        - task: Npm@1
          displayName: 'Run npm install'
          inputs:
            verbose: false
        
        - script: 'echo "$(Build.DefinitionName), $(build.BuildNumber)" > buildinfo.txt'
          displayName: 'write build info'
          workingDirectory: '$(wwwrootDir)'

        - task: DotNetCoreCLI@2
          displayName: 'Restore project dependencies'
          inputs: 
            command: 'restore'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project - $(buildConfiguration)'
          inputs: 
            command: 'build'
            arguments: '--no-restore --configuration $(buildConfiguration)'
            projects: '**/*.csproj'

        - task: VSTest@2
          inputs:
            platform: '$(buildPlataform)'
            configuration: '$(buildConfiguration)'
            
        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs: 
            command: 'publish'
            projects: '**/*.csproj'
            publishWebProjects: false
            arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            zipAfterPublish: true
            
        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: drop

  - stage: 'Development'
    displayName: 'Deploy to the Development'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: 'Deploy to Development'
        environment: 'development'
        pool:
          name: 'Default'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - powershell: |
                    echo "O deploy em Development foi realizado com sucesso."
                  displayName: 'Deploy to Development'

  - stage: 'Staging'
    displayName: 'Deploy to the Staging'
    dependsOn: Development
    condition: succeeded()
    jobs:
      - deployment: Deploy
        displayName: 'Deploy to Staging'
        environment: 'staging'
        pool:
          name: 'Default'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - powershell: |
                    echo "O deploy em Staging foi realizado com sucesso."
                  displayName: 'Deploy to Staging'
